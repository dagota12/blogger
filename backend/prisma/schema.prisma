// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Post{
  id String @id @default(uuid())
  title String
  userId String
  user User @relation("post_author",fields: [userId],references: [id],onDelete: Cascade)
  body String
  comments Comment[]
  likes PostVote[]
}
model PostVote{
  id String @id @default(uuid())
  user User @relation (fields:[userId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references:[id],onDelete: Cascade)
  vote_type PostVoteType
  userId String
  postId String
}
enum PostVoteType{
  UPVOTE
  dOWNVOTE
}
model User{
  id String @id @default(uuid())
  name String 
  email String @default("email")
  password String?
  profile_img String?
  posts Post[] @relation("post_author")
  comments Comment[]
  likes CommentLike[]
  postLikes PostVote[]
}

model Comment{
  id String @id @default(uuid())
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  postId String
  
  parent Comment? @relation("ParentChild",fields: [parentId],references: [id],onDelete: Cascade)
  children Comment[] @relation("ParentChild")
  parentId String? 

  likes CommentLike[]
}

model CommentLike{
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  comment Comment @relation(fields: [commentId],references: [id],onDelete: Cascade)
  userId String
  commentId String

  @@id([userId,commentId])

}